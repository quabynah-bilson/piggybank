// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: bank.proto

package ms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PiggyBankServiceClient is the client API for PiggyBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PiggyBankServiceClient interface {
	CreatePiggyBank(ctx context.Context, in *PiggyBank, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	GetPiggyBank(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*PiggyBank, error)
	UpdatePiggyBank(ctx context.Context, in *PiggyBank, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePiggyBank(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListPiggyBanks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (PiggyBankService_ListPiggyBanksClient, error)
}

type piggyBankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPiggyBankServiceClient(cc grpc.ClientConnInterface) PiggyBankServiceClient {
	return &piggyBankServiceClient{cc}
}

func (c *piggyBankServiceClient) CreatePiggyBank(ctx context.Context, in *PiggyBank, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/bank.PiggyBankService/CreatePiggyBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piggyBankServiceClient) GetPiggyBank(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*PiggyBank, error) {
	out := new(PiggyBank)
	err := c.cc.Invoke(ctx, "/bank.PiggyBankService/GetPiggyBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piggyBankServiceClient) UpdatePiggyBank(ctx context.Context, in *PiggyBank, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bank.PiggyBankService/UpdatePiggyBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piggyBankServiceClient) DeletePiggyBank(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bank.PiggyBankService/DeletePiggyBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piggyBankServiceClient) ListPiggyBanks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (PiggyBankService_ListPiggyBanksClient, error) {
	stream, err := c.cc.NewStream(ctx, &PiggyBankService_ServiceDesc.Streams[0], "/bank.PiggyBankService/ListPiggyBanks", opts...)
	if err != nil {
		return nil, err
	}
	x := &piggyBankServiceListPiggyBanksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PiggyBankService_ListPiggyBanksClient interface {
	Recv() (*PiggyBankList, error)
	grpc.ClientStream
}

type piggyBankServiceListPiggyBanksClient struct {
	grpc.ClientStream
}

func (x *piggyBankServiceListPiggyBanksClient) Recv() (*PiggyBankList, error) {
	m := new(PiggyBankList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PiggyBankServiceServer is the server API for PiggyBankService service.
// All implementations must embed UnimplementedPiggyBankServiceServer
// for forward compatibility
type PiggyBankServiceServer interface {
	CreatePiggyBank(context.Context, *PiggyBank) (*wrapperspb.StringValue, error)
	GetPiggyBank(context.Context, *wrapperspb.StringValue) (*PiggyBank, error)
	UpdatePiggyBank(context.Context, *PiggyBank) (*emptypb.Empty, error)
	DeletePiggyBank(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	ListPiggyBanks(*emptypb.Empty, PiggyBankService_ListPiggyBanksServer) error
	mustEmbedUnimplementedPiggyBankServiceServer()
}

// UnimplementedPiggyBankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPiggyBankServiceServer struct {
}

func (UnimplementedPiggyBankServiceServer) CreatePiggyBank(context.Context, *PiggyBank) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePiggyBank not implemented")
}
func (UnimplementedPiggyBankServiceServer) GetPiggyBank(context.Context, *wrapperspb.StringValue) (*PiggyBank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPiggyBank not implemented")
}
func (UnimplementedPiggyBankServiceServer) UpdatePiggyBank(context.Context, *PiggyBank) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePiggyBank not implemented")
}
func (UnimplementedPiggyBankServiceServer) DeletePiggyBank(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePiggyBank not implemented")
}
func (UnimplementedPiggyBankServiceServer) ListPiggyBanks(*emptypb.Empty, PiggyBankService_ListPiggyBanksServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPiggyBanks not implemented")
}
func (UnimplementedPiggyBankServiceServer) mustEmbedUnimplementedPiggyBankServiceServer() {}

// UnsafePiggyBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PiggyBankServiceServer will
// result in compilation errors.
type UnsafePiggyBankServiceServer interface {
	mustEmbedUnimplementedPiggyBankServiceServer()
}

func RegisterPiggyBankServiceServer(s grpc.ServiceRegistrar, srv PiggyBankServiceServer) {
	s.RegisterService(&PiggyBankService_ServiceDesc, srv)
}

func _PiggyBankService_CreatePiggyBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PiggyBank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiggyBankServiceServer).CreatePiggyBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.PiggyBankService/CreatePiggyBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiggyBankServiceServer).CreatePiggyBank(ctx, req.(*PiggyBank))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiggyBankService_GetPiggyBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiggyBankServiceServer).GetPiggyBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.PiggyBankService/GetPiggyBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiggyBankServiceServer).GetPiggyBank(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiggyBankService_UpdatePiggyBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PiggyBank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiggyBankServiceServer).UpdatePiggyBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.PiggyBankService/UpdatePiggyBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiggyBankServiceServer).UpdatePiggyBank(ctx, req.(*PiggyBank))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiggyBankService_DeletePiggyBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiggyBankServiceServer).DeletePiggyBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.PiggyBankService/DeletePiggyBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiggyBankServiceServer).DeletePiggyBank(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiggyBankService_ListPiggyBanks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PiggyBankServiceServer).ListPiggyBanks(m, &piggyBankServiceListPiggyBanksServer{stream})
}

type PiggyBankService_ListPiggyBanksServer interface {
	Send(*PiggyBankList) error
	grpc.ServerStream
}

type piggyBankServiceListPiggyBanksServer struct {
	grpc.ServerStream
}

func (x *piggyBankServiceListPiggyBanksServer) Send(m *PiggyBankList) error {
	return x.ServerStream.SendMsg(m)
}

// PiggyBankService_ServiceDesc is the grpc.ServiceDesc for PiggyBankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PiggyBankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank.PiggyBankService",
	HandlerType: (*PiggyBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePiggyBank",
			Handler:    _PiggyBankService_CreatePiggyBank_Handler,
		},
		{
			MethodName: "GetPiggyBank",
			Handler:    _PiggyBankService_GetPiggyBank_Handler,
		},
		{
			MethodName: "UpdatePiggyBank",
			Handler:    _PiggyBankService_UpdatePiggyBank_Handler,
		},
		{
			MethodName: "DeletePiggyBank",
			Handler:    _PiggyBankService_DeletePiggyBank_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPiggyBanks",
			Handler:       _PiggyBankService_ListPiggyBanks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bank.proto",
}
